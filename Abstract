Program comprehension is one of the major activities in software maintenance. Researchers studied how programmers understand the code and which factors hinder code understandability. They reported that linguistic anti-patterns (LAs), i.e., bad practices in the naming, documentation, and implementation of code artifacts, may have a negative impact on understandability. We perform an empirical study to investigate whether the occurrences of LAs do indeed affect understandability. We examine seven different types of LAs and we conduct two experiments with 90 participants to perform program comprehension tasks on code containing or not occurrences on LAs, with and without prior knowledge of the LAs. We also ask participants to find possible LA on different code snippets. We observe that LAs negatively affect participants’ understanding, specifically decrease the numbers of correct answers. We find that the LAs “Set method returns”, “Says one but contains many”, and “Not answered questions” have the most negative impact on understandability in terms of comprehension while “Says many but contains one” and “Attribute name and type are opposite” are the most difficult to detect. We also study the role that prior knowledge of LAs has on the effect of LA occurrences on understandability and observe that prior knowledge mitigates the negative effect of LAs. We conclude that developers should learn about LAs and consider refactoring those LAs to ease program comprehension.
